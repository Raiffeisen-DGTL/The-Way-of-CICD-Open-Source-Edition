### Build OCI compliant images
.build_kaniko:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:1.7.0
    entrypoint: [""]
  variables:
    REGISTRY_HOST: #default points to hub.docker.com
    REGISTRY_PATH: "" #relative path on your registry
    DOCKERFILE: "Dockerfile"  # Path from root of $CI_PROJECT_DIR, for example 'docker/Dockerfile.maven'
    IMAGE_NAME: "YOUR_IMAGE" # Thae variable can be equal $CI_PROJECT_NAME or thunk up your own name
    IMAGE_TAG: "YOUR_TAG" # For example 1.0.0
    KANIKO_BUILD_ARGS: >-
      --context $CI_PROJECT_DIR ${KANIKO_BUILD_ARGS}
      --dockerfile $CI_PROJECT_DIR/$DOCKERFILE
      --build-arg REGISTRY_USER=${REGISTRY_USER}
      --build-arg REGISTRY_PASSWORD=${REGISTRY_PASSWORD}
      --destination $REGISTRY_HOST/$DOCKER_REGISTRY/${IMAGE_NAME}:$IMAGE_TAG
  before_script:
    - echo "{\"auths\":{\"$REGISTRY_HOST\":{\"username\":\"$REGISTRY_USER\",\"password\":\"$REGISTRY_USER_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/$DOCKERFILE
      ${KANIKO_BUILD_ARGS}

.build_docker:
  stage: build
  image: docker:24.0.5-cli-alpine3.18
  services:
    - name: docker:24.0.5-dind-rootless
      alias: dind
  variables:
    DOCKER_HOST: tcp://dind:2375
    REGISTRY_HOST: ""
    REGISTRY_PATH: ""
    IMAGE_NAME: "YOUR_IMAGE" # Thae variable can be equal $CI_PROJECT_NAME or thunk up your own name
    IMAGE_TAG: "YOUR_TAG" # For example 1.0.0
    DOCKER_BUILD_ARGS: >-
      --tag $REGISTRY_HOST/$DOCKER_REGISTRY/${IMAGE_NAME}:$IMAGE_TAG
      --build-arg REGISTRY_USER=${REGISTRY_USER}
      --build-arg REGISTRY_PASSWORD=${REGISTRY_PASSWORD}
  before_script:
    - docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASSWORD" $REGISTRY_HOST || exit 1
  script:
    - docker build . ${DOCKER_BUILD_ARGS}
    - docker push $REGISTRY_HOST/$DOCKER_REGISTRY/${IMAGE_NAME}:$IMAGE_TAG
  after_script:
    - docker logout $REGISTRY_HOST


### Build and test with gradle


.build_and_test_gradle:
  stage: build
  image: $JVM_IMAGE
  services:
    - name: docker:24.0.5-dind-rootless
  variables:
    JVM_IMAGE: "gradle:jdk11-alpine"
    PIPELINE_CACHE_KEY: $CI_COMMIT_REF_NAME-$CI_PIPELINE_ID
    DOCKER_HOST: tcp://dind:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
    TESTCONTAINERS_RYUK_DISABLED: "true"
    TESTCONTAINERS_CHECKS_DISABLE: "true"
  artifacts:
    reports:
      junit: "$JUNIT_PATH"
    paths:
      - build
    expire_in: 30 mins
  script:
    - $GRADLE -version
    - $GRADLE build --build-cache $GRADLE_PARAMS
    - export GRADLE_USER_HOME=`pwd`/.gradle
  cache:
    key: $PIPELINE_CACHE_KEY
    paths:
      - $GRADLE_USER_HOME
    policy: push

### Build and publish image with gradle

.build_image_jib:
  stage: publish-image
  image: $JVM_IMAGE
  services:
    - name: docker:24.0.5-dind-rootless
  variables:
    JVM_IMAGE: "gradle:jdk11-alpine"
    DOCKER_HOST: tcp://localhost:2375
    PIPELINE_CACHE_KEY: $CI_COMMIT_REF_NAME-$CI_PIPELINE_ID
  script:
    - $GRADLE -version
    - $GRADLE jib $GRADLE_PARAMS
    - cat ./deploy.env
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
  artifacts:
    paths:
      - ./deploy.env
  cache:
    key: $PIPELINE_CACHE_KEY
    paths:
      - $GRADLE_USER_HOME
    policy: pull

