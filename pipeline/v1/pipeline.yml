.slack:
  image: alpine:3.18.3
  variables:
    SLACK_FAIL_ONLY: "true"
    SYS_PROXY: "YOUR.PROXY.IF.EXISTS:8080"
  after_script:
    - |
      echo "CI_JOB_STATUS: $CI_JOB_STATUS"
      echo "SLACK_FAIL_ONLY: $SLACK_FAIL_ONLY"
      if [[ "$SLACK_FAIL_ONLY" == "true" && "$CI_JOB_STATUS" != "failed" ]]
      then
        echo "No need to send anything, exiting..."
        exit 0
      fi
    - |
      for ENTRY in $SLACK_UIDS
      do
        if [[ "${ENTRY%=*}" == "$GITLAB_USER_EMAIL" ]]
        then
          export SLACK_UID="${ENTRY#*=}"
          echo "SLACK_UID: $SLACK_UID"
        fi
      done
    - |
      if [[ -z "$SLACK_UID" ]]
      then
        echo "SLACK_UID: $GITLAB_USER_EMAIL is not found in SLACK_UIDS"
        SLACK_UID_TAG=""
      else
        SLACK_UID_TAG="<@${SLACK_UID}>"
      fi
    - |
      if [[ -z "$SLACK_MESSAGE" ]]
      then
        case $CI_JOB_STATUS in
          "success")
            STATUS_ICON=":white_check_mark:"
            ;;
          "failed")
            STATUS_ICON=":no_entry:"
            ;;
          "canceled")
            STATUS_ICON=":warning:"
            ;;
        esac
        SLACK_MESSAGE="${SLACK_UID_TAG}$STATUS_ICON $CI_PROJECT_TITLE ($CI_COMMIT_REF_SLUG) $CI_JOB_NAME $CI_JOB_STATUS"
      fi
      echo "SLACK_MESSAGE: $SLACK_MESSAGE"
      MESSAGE_TEXT="{\"text\": \"${SLACK_MESSAGE}\n${CI_PIPELINE_URL}\"}"
      curl --proxy $SYS_PROXY -X POST -H "Content-type: application/json" --data "$MESSAGE_TEXT" "$SLACK_WEBHOOK"

.time_tracker:
  image: alpine:3.18.3
  before_script:
    - |
      #!/bin/bash
      set -e
      run () {
        PREFIX=$(if [[ "$DRY_RUN" == "1" ]]; then echo "dry run"; else echo "run"; fi)
        echo "$PREFIX: $*"
        if [[ "$DRY_RUN" == "1" ]]; then
          return 0
        fi
        eval "$@"
      }
      use_printf=`printf "%(true)T\n" -1 2>/dev/null` || use_printf=false
      use_awk=`awk 'BEGIN{print(strftime("true"));}'` || use_awk=false
      echo "logging: use_printf=$use_printf; use_awk=$use_awk"
      if $use_printf ; then
        logging_pipe=$$.logging
        mkfifo $logging_pipe
        (set +x;while read -r line;do printf "%(%H:%M:%S)T  %s\n" -1 "$line";done) <$logging_pipe&
        exec >$logging_pipe 2>&1
        rm $logging_pipe
      elif $use_awk ; then
        logging_pipe=$$.logging
        mkfifo $logging_pipe
        awk '{printf("%s  %s\n",strftime("%H:%M:%S"),$0);}' <$logging_pipe&
        exec >$logging_pipe 2>&1
        rm $logging_pipe
      else
        echo "Can't setup timestamped logging."
      fi
      echo "logging: Started."

.get_certificate:
  variables:
    VAULT_ADDRESS: "https://path.to.your.pki:8200"
    PKI_ROLE_ID: "$PKI_TEST_ROLE_ID"
    PKI_SECRET_ID: "$PKI_TEST_SECRET_ID"
    PKI_COMMON_NAME: "test.example.com"
    PKI_ALT_NAMES: "test2.example.com,test3.example.com"
    PKI_TTL: "8760h"
    PKI_ROLE_NAME: "$PKI_ROLE_NAME"
  image: msvechla/vaultbot:1.13
  script:
    - mkdir ./vaultbot/
    - /root/vaultbot 
      --vault_addr=${VAULT_ADDRESS}
      --vault_auth_method=approle 
      --vault_app_role_role_id=${PKI_ROLE_ID}
      --vault_app_role_secret_id=${PKI_SECRET_ID}
      --pki_mount=pki_int 
      --pki_role_name=$PKI_ROLE_NAME
      --pki_common_name=${PKI_COMMON_NAME}
      --pki_alt_names=${PKI_ALT_NAMES}
      --pki_ttl=${PKI_TTL} 
      --pki_renew_time=720h 
      --pki_private_key_format=pkcs8 
      --pki_cert_path=./vaultbot/certificate.crt 
      --pki_privkey_path=./vaultbot/private.key
    - ls -la ./vaultbot/
  artifacts:
    paths:
      - ./vaultbot/
